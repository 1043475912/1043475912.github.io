<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>web存储两种方式的异同</title>
      <link href="/2019/03/11/web%E5%AD%98%E5%82%A8/"/>
      <url>/2019/03/11/web%E5%AD%98%E5%82%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="localStorage"><a href="#localStorage" class="headerlink" title="localStorage"></a>localStorage</h1><p>localStorage存储的数据是存储在硬盘上的，能存储20M左右，它可以跨页面访问，但不能跨浏览器访问，生命周期是永久，只能手动清除</p><h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><p><code>localStorage.setItem(&#39;username&#39;,&#39;Tom&#39;)</code></p><h2 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h2><p><code>localStorage.getItem(&#39;username&#39;)</code></p><h2 id="清除"><a href="#清除" class="headerlink" title="清除"></a>清除</h2><p><code>localStorage.removeItem(&#39;username&#39;)</code></p><h1 id="sessionStorage"><a href="#sessionStorage" class="headerlink" title="sessionStorage"></a>sessionStorage</h1><p>sessionStorage是存储在当前页面中的，能存5M左右，不能跨页面更不能跨浏览器访问，生命周期是页面存在的时间，关闭页面清除</p><h2 id="设置-1"><a href="#设置-1" class="headerlink" title="设置"></a>设置</h2><p><code>sessionStorage.setItem(&#39;username&#39;,&#39;Tom&#39;)</code></p><h2 id="获取-1"><a href="#获取-1" class="headerlink" title="获取"></a>获取</h2><p><code>sessionStorage.getItem(&#39;username&#39;)</code></p><h2 id="清除-1"><a href="#清除-1" class="headerlink" title="清除"></a>清除</h2><p><code>sessionStorage.removeItem(&#39;username&#39;)</code></p><h2 id="以上两种存储方式都比cookie存储数据量要大，cookie存储量只有4k左右"><a href="#以上两种存储方式都比cookie存储数据量要大，cookie存储量只有4k左右" class="headerlink" title="以上两种存储方式都比cookie存储数据量要大，cookie存储量只有4k左右"></a>以上两种存储方式都比cookie存储数据量要大，cookie存储量只有4k左右</h2>]]></content>
      
      
      <categories>
          
          <category> HTML5 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>判断一个字符串是否是另一个字符串的子字符串</title>
      <link href="/2019/02/28/%E6%96%B0%E5%BB%BA%E6%96%87%E6%9C%AC%E6%96%87%E6%A1%A3/"/>
      <url>/2019/02/28/%E6%96%B0%E5%BB%BA%E6%96%87%E6%9C%AC%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="判断两个字符串的关系时，可以在长字符串中截取与短字符串相等长度的字符串进行比较，看下面代码："><a href="#判断两个字符串的关系时，可以在长字符串中截取与短字符串相等长度的字符串进行比较，看下面代码：" class="headerlink" title="判断两个字符串的关系时，可以在长字符串中截取与短字符串相等长度的字符串进行比较，看下面代码："></a>判断两个字符串的关系时，可以在长字符串中截取与短字符串相等长度的字符串进行比较，看下面代码：</h2><p> <code>function judge(son,father){</code><br>       &emsp;<code>for(i=0;i&lt;father.length;i++){</code><br>           &emsp; &emsp;<code>if(son[0]==father[i]){</code><br>             &emsp; &emsp;<code>return father.slice(i,i+son.length)==son;</code><br>          &emsp; &emsp; &emsp; <code>}</code><br>       &emsp; &emsp;<code>}</code></p><p> <code>}</code> </p><p><code>document.writeln(judge(&#39;ab&#39;,&#39;abc&#39;))</code></p><h2 id="另外一种比较简单的方法就是判断短字符串在长字符串中的位置"><a href="#另外一种比较简单的方法就是判断短字符串在长字符串中的位置" class="headerlink" title="另外一种比较简单的方法就是判断短字符串在长字符串中的位置"></a>另外一种比较简单的方法就是判断短字符串在长字符串中的位置</h2><p><code>document.writeln(&#39;abc&#39;.indexOf(&#39;ab&#39;)&gt;-1?true:false)</code></p>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>用CSS实现元素内容居中</title>
      <link href="/2019/02/21/%E5%AE%9E%E7%8E%B0%E5%85%83%E7%B4%A0%E5%86%85%E5%AE%B9%E5%B1%85%E4%B8%AD/"/>
      <url>/2019/02/21/%E5%AE%9E%E7%8E%B0%E5%85%83%E7%B4%A0%E5%86%85%E5%AE%B9%E5%B1%85%E4%B8%AD/</url>
      
        <content type="html"><![CDATA[<h1 id="1-水平居中"><a href="#1-水平居中" class="headerlink" title="1.水平居中"></a>1.水平居中</h1><p>##实现水平居中是最简单的，文本内容直接居中即可<br><code>div{</code><br>    <code>width:300px;</code><br>    <code>height:300px;</code><br>    <code>text-align:center;</code><br>    <code>border: 1px solid black;</code><br><code>}</code></p><h1 id="2-垂直居中"><a href="#2-垂直居中" class="headerlink" title="2.垂直居中"></a>2.垂直居中</h1><p>##实现垂直居中只介绍比较简单的3种方法，毕竟本人只是菜鸟一枚(TmT)</p><p>##2.1 设置行高与元素高度一致(只适用于1行内容)<br><code>div{</code><br>    <code>width:300px;</code><br>    <code>height:300px;</code><br>    <code>line-height:300px;</code><br>    <code>border: 1px solid black;</code><br><code>}</code></p><p>##2.2 根据高度控制内边距<br><code>div{</code><br>    <code>width:300px;</code><br>    <code>height:300px;</code><br>    <code>padding-top:140px; //这里大家可自行更改数值使之居中</code><br>    <code>border: 1px solid black;</code><br><code>}</code></p><p>##2.3 css动画实现（将内容放入p标签中）<br><code>div{</code><br>    <code>position: relative;</code><br>    <code>width: 300px;</code><br>    <code>height: 300px;</code><br>    <code>border: 1px solid red;</code></p><p><code>}</code><br><code>p{</code><br>   <code>position: absolute;</code><br>   <code>width: 150px;</code><br>   <code>top: 50%;</code><br>   <code>left:50%;</code><br>   <code>transform: translate(-50%,-50%);</code><br>   <code>border: 1px solid black;</code><br> }</p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>用CSS实现各种几何图形</title>
      <link href="/2019/02/21/css%E5%AE%9E%E7%8E%B0%E5%87%A0%E4%BD%95%E5%9B%BE%E5%BD%A2/"/>
      <url>/2019/02/21/css%E5%AE%9E%E7%8E%B0%E5%87%A0%E4%BD%95%E5%9B%BE%E5%BD%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="1-矩形"><a href="#1-矩形" class="headerlink" title="1.矩形"></a>1.矩形</h1><p>##实现矩形是最简单的，只需设置块元素的宽高和颜色即可<br><code>div{</code><br><code>width:100px;</code><br><code>height:200px;</code><br><code>background-color:blue;</code></p><p><code>}</code></p><h1 id="2-三角形"><a href="#2-三角形" class="headerlink" title="2.三角形"></a>2.三角形</h1><p>##实现三角形只需将元素的宽高和内填充设为0，只剩边框即可<br><code>div{</code><br><code>width:0px;</code><br><code>height:0px;</code><br><code>border-width:5px;</code><br><code>border-style:solid;</code><br><code>border-color:blue red green skyblue</code><br><code>}</code></p><p>##如果只想要1个三角形，将其他3个边框的颜色变成透明(transparent)即可</p><h1 id="3-圆形（椭圆形）"><a href="#3-圆形（椭圆形）" class="headerlink" title="3.圆形（椭圆形）"></a>3.圆形（椭圆形）</h1><p>##实现圆形（椭圆形）只需控制元素的四个角的圆角圆心位置即可<br><code>div{</code><br><code>width:100px;</code><br><code>height:100px;</code><br><code>border-radius:50%/50%;</code><br><code>}</code></p><p>##div为正方形时可画圆，为矩形时可画椭圆。由此也可延伸出画半圆，1/4圆等，比较简单，这里不详述了。</p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数组去重</title>
      <link href="/2019/02/21/%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D/"/>
      <url>/2019/02/21/%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="这里采用ES6中新引入的数据结构Set进行去重，简单又实用"><a href="#这里采用ES6中新引入的数据结构Set进行去重，简单又实用" class="headerlink" title="这里采用ES6中新引入的数据结构Set进行去重，简单又实用"></a>这里采用ES6中新引入的数据结构Set进行去重，简单又实用</h1><p><code>var arr=[&#39;a&#39;,&#39;a&#39;,1,1,NaN,NaN,{},{},[],[]];</code><br><code>var set1=new Set(arr);</code><br><code>var arr1=Array.from(set1)</code></p><h2 id="数组去重的一个缺陷就是不管用es5还是es6方法，NaN都只能存在一个，但每一个NaN都不相等。所以要使用es6中的isNaN方法将去掉的NaN重新加上"><a href="#数组去重的一个缺陷就是不管用es5还是es6方法，NaN都只能存在一个，但每一个NaN都不相等。所以要使用es6中的isNaN方法将去掉的NaN重新加上" class="headerlink" title="!!! 数组去重的一个缺陷就是不管用es5还是es6方法，NaN都只能存在一个，但每一个NaN都不相等。所以要使用es6中的isNaN方法将去掉的NaN重新加上"></a>!!! 数组去重的一个缺陷就是不管用es5还是es6方法，NaN都只能存在一个，但每一个NaN都不相等。所以要使用es6中的isNaN方法将去掉的NaN重新加上</h2><p><code>var flag=0;</code><br><code>for(i=0;i&lt;arr.length;i++){</code><br>   &emsp;<code>if(Number.isNaN(arr[i])==true){</code><br>   &emsp;&emsp;&emsp;&emsp;<code>flag++;</code><br><code>}</code><br>&emsp;<code>}</code></p><h2 id="此时可以判断出原数组有多少个NaN，再加入arr1中即可"><a href="#此时可以判断出原数组有多少个NaN，再加入arr1中即可" class="headerlink" title="此时可以判断出原数组有多少个NaN，再加入arr1中即可"></a>此时可以判断出原数组有多少个NaN，再加入arr1中即可</h2><p><code>if(flag==0||flag==1)</code><br>&emsp;&emsp;<code>console.log(arr1)</code><br><code>else{for(i=1;i&lt;flag;i++){</code><br>&emsp;<code>arr1.push(NaN)}</code><br>&emsp;&emsp;<code>console.log(arr1);}</code></p>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>找出数组中每个字母出现的次数及统计出现次数最多的字母</title>
      <link href="/2019/02/21/%E6%89%BE%E5%87%BA%E6%95%B0%E7%BB%84%E4%B8%AD%E6%AF%8F%E4%B8%AA%E5%AD%97%E6%AF%8D%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0/"/>
      <url>/2019/02/21/%E6%89%BE%E5%87%BA%E6%95%B0%E7%BB%84%E4%B8%AD%E6%AF%8F%E4%B8%AA%E5%AD%97%E6%AF%8D%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="这里举例说明如何实现，给定任一数组，代码如下"><a href="#这里举例说明如何实现，给定任一数组，代码如下" class="headerlink" title="这里举例说明如何实现，给定任一数组，代码如下:"></a>这里举例说明如何实现，给定任一数组，代码如下:</h1><p><code>var arr=[&#39;a&#39;,&#39;a&#39;,&#39;a&#39;,&#39;a&#39;,&#39;a&#39;,&#39;b&#39;,&#39;b&#39;,&#39;b&#39;,&#39;c&#39;,&#39;c&#39;,&#39;d&#39;,&#39;d&#39;,&#39;d&#39;,&#39;d&#39;,&#39;e&#39;];</code><br><code>var obj={};</code><br><code>for(i=0;i&lt;arr.length;i++){</code><br>&emsp;<code>var key=arr[i];</code><br>&emsp;&emsp;<code>if(!obj[key]){</code><br>&emsp;&emsp;&emsp;<code>obj[key]=1;</code><br>&emsp;&emsp;<code>}else{</code><br>&emsp;&emsp;&emsp;<code>obj[key]++;</code><br>&emsp;<code>}</code><br>&emsp;&emsp;<code>}</code></p><h2 id="此时得到了一个对象，键存储字母，值存储字母出现的次数-下面再将对象的值存储在数组中"><a href="#此时得到了一个对象，键存储字母，值存储字母出现的次数-下面再将对象的值存储在数组中" class="headerlink" title="此时得到了一个对象，键存储字母，值存储字母出现的次数,下面再将对象的值存储在数组中:"></a>此时得到了一个对象，键存储字母，值存储字母出现的次数,下面再将对象的值存储在数组中:</h2><p><code>var arr2=[];</code><br><code>for(key in obj){</code><br>&emsp;<code>arr2.push(obj[key])</code><br><code>}</code></p><h2 id="此时找寻arr2中的最大值"><a href="#此时找寻arr2中的最大值" class="headerlink" title="此时找寻arr2中的最大值"></a>此时找寻arr2中的最大值</h2><p><code>max=Math.max(...arr2)</code></p><h2 id="找寻arr2中的最大值对应的obj中的键"><a href="#找寻arr2中的最大值对应的obj中的键" class="headerlink" title="找寻arr2中的最大值对应的obj中的键"></a>找寻arr2中的最大值对应的obj中的键</h2><p><code>for( key in obj){</code><br>&emsp;<code>if(obj[key]==max){</code><br>&emsp;&emsp;<code>console.log(&#39;字母&#39;+key+&#39;出现的次数最多，出现了&#39;+max+&#39;次&#39;)</code><br><code>}</code><br>&emsp;<code>}</code></p><h2 id="结果是字母a出现的次数最多，出现了5次"><a href="#结果是字母a出现的次数最多，出现了5次" class="headerlink" title="结果是字母a出现的次数最多，出现了5次"></a>结果是字母a出现的次数最多，出现了5次</h2>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>利用三维变换实现轮播图</title>
      <link href="/2019/01/23/3D%E8%BD%AE%E6%92%AD%E5%9B%BE/"/>
      <url>/2019/01/23/3D%E8%BD%AE%E6%92%AD%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<p>同样再说一下整体思路：<code>HTML5</code>实现轮播图时，是所有图片叠放在一个位置，然后通过平移和旋转，形成立方体的4个面，通过旋转立方体实现图片轮播，这里主要熟悉三维变换，缺点就是只能轮播4个图片。</p><h1 id="html代码"><a href="#html代码" class="headerlink" title="html代码"></a>html代码</h1><p><code>&lt;div class=&quot;view&quot;&gt;</code><br>   <code>&lt;ul&gt;</code><br>        <code>&lt;!--一个li就是一个结构块,包括4个面--&gt;</code><br>        <code>&lt;li&gt;</code><br>           <code>&lt;!--每一个span是这个结构块中的某一个面，用来显示图片--&gt;</code><br>            <code>&lt;span&gt;&lt;/span&gt;</code><br>            <code>&lt;span&gt;&lt;/span&gt;</code><br>            <code>&lt;span&gt;&lt;/span&gt;</code><br>            <code>&lt;span&gt;&lt;/span&gt;</code><br>        <code>&lt;/li&gt;</code><br>    <code>&lt;/ul&gt;</code><br>    <code>&lt;div class=&quot;arrow&quot;&gt;</code><br>    <code>&lt;a class=&quot;pre&quot;&gt;&amp;lt;&lt;/a&gt;</code><br>    <code>&lt;a class=&quot;next&quot;&gt;&amp;gt;&lt;/a&gt;</code><br><code>&lt;/div&gt;</code><br><code>&lt;/div&gt;</code></p><h2 id="这里我只用了一个结构块，可以看到我们所见的图片轮播，也可以用多个结构块实现切割轮播"><a href="#这里我只用了一个结构块，可以看到我们所见的图片轮播，也可以用多个结构块实现切割轮播" class="headerlink" title="这里我只用了一个结构块，可以看到我们所见的图片轮播，也可以用多个结构块实现切割轮播"></a>这里我只用了一个结构块，可以看到我们所见的图片轮播，也可以用多个结构块实现切割轮播</h2><h1 id="css代码"><a href="#css代码" class="headerlink" title="css代码"></a>css代码</h1><pre><code>*{    padding: 0;    margin: 0;}.view{    width: 560px;    height: 300px;    margin:100px auto;    position: relative;}ul{    width: 100%;    height: 100%;    list-style: none;    /*transform: rotate3d(1,1,0,-30deg); 旋转才能看到立方体*/    transform-style: preserve-3d;}ul &gt; li{    width: 100%;    height: 100%;    float: left;    position: relative;    transform-style: preserve-3d;    /*添加过渡效果*/    transition: transform 0.5s;}ul &gt; li &gt; span{    width: 100%;    height: 100%;    position: absolute;    left: 0;    top: 0;}ul &gt; li &gt; span:nth-of-type(1) {    background: url(&quot;&quot;);    /*往z轴正方向偏移*/    transform: translateZ(150px);}ul &gt; li &gt; span:nth-of-type(2){    background: url(&quot;&quot;);    transform: translateY(-150px) rotateX(90deg);}ul &gt; li &gt; span:nth-of-type(3){    background: url(&quot;&quot;);    transform: translateZ(-150px) rotateX(180deg);}ul &gt; li &gt; span:nth-of-type(4){    background: url(&quot;&quot;);    transform: translateY(150px) rotateX(-90deg);}.pre,.next{    width: 60px;    height: 60px;    text-align: center;    line-height:60px;    position: absolute;    top: 50%;    font-size: 40px;    transform: translate(0,-50%);    background-color: rgba(0,0,0,0.5);    color: #fff;}.arrow{    width:560px;    height:50px;    display: none;}.view:hover .arrow{    display: block;}.pre:hover,.next:hover {    cursor: pointer;}.pre{    left: 0;}.next{    right: 0;}</code></pre><h2 id="用css3代码可以实现元素的移动和旋转，好处就是可以代替一部分js代码，所以这里的css代码多了点"><a href="#用css3代码可以实现元素的移动和旋转，好处就是可以代替一部分js代码，所以这里的css代码多了点" class="headerlink" title="用css3代码可以实现元素的移动和旋转，好处就是可以代替一部分js代码，所以这里的css代码多了点"></a>用<code>css3</code>代码可以实现元素的移动和旋转，好处就是可以代替一部分<code>js</code>代码，所以这里的<code>css</code>代码多了点</h2><h1 id="Jquery代码"><a href="#Jquery代码" class="headerlink" title="Jquery代码"></a>Jquery代码</h1><h2 id="1-自动播放"><a href="#1-自动播放" class="headerlink" title="1 自动播放"></a>1 自动播放</h2><p> <code>var timeId=setInterval(play,3000);</code><br>       <code>var count=0;</code><br>        <code>function play(){</code><br>        <code>count++;</code></p><pre><code>     $(&quot;li&quot;).each(function(key,value){ //0 1 2 3 4              /*通过添加transform样式进行旋转*/              $(this).css({                  &quot;transform&quot;:&quot;rotateX(&quot;+(-count*90)+&quot;deg)&quot;              });          }); }</code></pre><h2 id="2-左右箭头"><a href="#2-左右箭头" class="headerlink" title="2 左右箭头"></a>2 左右箭头</h2><pre><code>/*定义图片索引*/var index=0;/*添加节流阀 */var flag=true;/*下一张*/$(&quot;.next&quot;).on(&quot;click&quot;,function(){    if(flag==true){        /*设置节流阀*/        flag=false;        index--;        /*所谓下一张，就是将所有li元素围绕x旋转*/        $(&quot;li&quot;).each(function(key,value){ //0 1 2 3 4            /*通过添加transform样式进行旋转*/            $(this).css({                &quot;transform&quot;:&quot;rotateX(&quot;+(index*90)+&quot;deg)&quot;            });        });        setTimeout(function(){            flag=true;        },1000);//延迟1秒用户才能再次点击，防止用户多次点击    }});/*上一张*/$(&quot;.pre&quot;).on(&quot;click&quot;,function(){    if(flag==true){        /*设置节流阀*/        flag=false;        index++;        /*所谓下一张，就是将所有li元素围绕x旋转*/        $(&quot;li&quot;).each(function(key,value){ //0 1 2 3 4            /*通过添加transform样式进行旋转*/            $(this).css({                &quot;transform&quot;:&quot;rotateX(&quot;+(index*90)+&quot;deg)&quot;            });        });        setTimeout(function(){            flag=true;        },1000);    }});</code></pre><h2 id="3-进入元素停止定时器，离开开启"><a href="#3-进入元素停止定时器，离开开启" class="headerlink" title="3 进入元素停止定时器，离开开启"></a>3 进入元素停止定时器，离开开启</h2><pre><code>$(&apos;.view&apos;).hover(function(){  clearInterval(timeId);},function(){   timeId=setInterval(play,3000);})</code></pre>]]></content>
      
      
      <categories>
          
          <category> HTML5 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>利用Jquery实现轮播图</title>
      <link href="/2019/01/22/jquery%E8%BD%AE%E6%92%AD%E5%9B%BE/"/>
      <url>/2019/01/22/jquery%E8%BD%AE%E6%92%AD%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<p>同样先说一下整体思路：<code>Jquery</code>实现轮播图时，是所有图片叠放在一个位置，轮播时当前的图片显示，其他图片隐藏，这样做的一个好处就是在网页布局时，轮播图的位置只占一小块，不会影响其他布局（<code>js</code>原生代码实现时会占据所有图片的空间）</p><h1 id="html代码"><a href="#html代码" class="headerlink" title="html代码"></a>html代码</h1><p><code>&lt;div class=&quot;slider&quot;&gt;</code><br>  <code>&lt;ul&gt;</code><br>  <code>&lt;li&gt;&lt;img src=&quot;images/1.jpg&quot; width=&quot;500px&quot; height=&#39;200px&#39;&gt;&lt;/li&gt;</code><br>  <code>&lt;li&gt;&lt;img src=&quot;images/2.jpg&quot; width=&quot;500px&quot; height=&#39;200px&#39;&gt;&lt;/li&gt;</code><br>  <code>&lt;li&gt;&lt;img src=&quot;images/3.jpg&quot; width=&quot;500px&quot; height=&#39;200px&#39;&gt;&lt;/li&gt;</code><br>  <code>&lt;li&gt;&lt;img src=&quot;images/4.jpg&quot; width=&quot;500px&quot; height=&#39;200px&#39;&gt;&lt;/li&gt;</code><br> <code>&lt;/ul&gt;</code></p><p>  <code>&lt;ol&gt;</code><br>    <code>&lt;li&gt;&lt;/li&gt;</code><br>    <code>&lt;li&gt;&lt;/li&gt;</code><br>    <code>&lt;li&gt;&lt;/li&gt;</code><br>    <code>&lt;li&gt;&lt;/li&gt;</code><br>  <code>&lt;/ol&gt;</code><br>  <code>&lt;!--箭头--&gt;</code><br>  <code>&lt;div class=&quot;arrow&quot;&gt;</code><br>    <code>&lt;span class=&quot;arrow-left&quot;&gt;&amp;lt;&lt;/span&gt;</code><br>    <code>&lt;span class=&quot;arrow-right&quot;&gt;&amp;gt;&lt;/span&gt;</code><br>  <code>&lt;/div&gt;</code><br><code>&lt;/div&gt;</code></p><h1 id="css代码"><a href="#css代码" class="headerlink" title="css代码"></a>css代码</h1><p> <code>* {</code><br>     <code>margin: 0;</code><br>     <code>padding: 0;</code><br>      <code>list-style: none;</code><br>    <code>}</code></p><pre><code>.slider {  height: 200px;  width: 500px;  margin: 100px auto;  position: relative;}.slider ul li {  position: absolute;  display: none;}.slider ul li:first-child {  display: block;}.slider ol {  position: absolute;  left: 200px;  bottom: 10px;}.slider ol li {  float: left;  width: 10px;  height: 10px;  border-radius:50%;  background-color:#fff;  border: 1px solid #ccc;  margin-left: 10px;  cursor: pointer;} .arrow {  display: none;}.slider:hover .arrow {  display: block;}.arrow-left,.arrow-right {  font-family: &quot;SimSun&quot;, &quot;宋体&quot;;  width: 30px;  height: 60px;  background-color: rgba(0, 0, 0, 0.1);  position: absolute;  top: 50%;  margin-top: -30px;  cursor: pointer;  text-align: center;  line-height: 60px;  color: #fff;  font-weight: 700;  font-size: 30px;}.arrow-left:hover,.arrow-right:hover {  background-color: rgba(0, 0, 0, .5);}.arrow-left {  left: 0;}.arrow-right {  right: 0;}</code></pre><h1 id="Jquery代码"><a href="#Jquery代码" class="headerlink" title="Jquery代码"></a>Jquery代码</h1><h2 id="1-自动播放"><a href="#1-自动播放" class="headerlink" title="1 自动播放"></a>1 自动播放</h2><p> <code>var index=0;</code><br>    <code>$(&#39;ol li&#39;).eq(index).css({&#39;background&#39;:&#39;red&#39;}).siblings(&#39;li&#39;).css({&#39;background&#39;:&#39;#fff&#39;});</code><br>    <code>var timeId=setInterval(play,3000);</code></p><pre><code>function play(){    index++;    if(index==$(&apos;ul li&apos;).length){        index=0;}  $(&apos;ul li&apos;).eq(index).fadeIn().siblings(&apos;ul li&apos;).fadeOut();  $(&apos;ol li&apos;).eq(index).css({&apos;background&apos;:&apos;red&apos;}).siblings(&apos;li&apos;).css({&apos;background&apos;:&apos;#fff&apos;});        }</code></pre><h2 id="2-左右箭头"><a href="#2-左右箭头" class="headerlink" title="2 左右箭头"></a>2 左右箭头</h2><pre><code>var count = 0;$(&quot;.arrow-right&quot;).click(function () {  count++;  if(count == $(&quot;ul li&quot;).length){    count = 0;  }  //让count渐渐的显示，其他兄弟渐渐的隐藏  $(&quot;ul li&quot;).eq(count).fadeIn().siblings(&quot;li&quot;).fadeOut();  $(&apos;ol li&apos;).eq(count).css({&apos;background&apos;:&apos;red&apos;}).siblings(&apos;li&apos;).css({&apos;background&apos;:&apos;#fff&apos;});});$(&quot;.arrow-left&quot;).click(function () {  count--;  if(count == -1){    count = $(&quot;ul li&quot;).length - 1;  }  //让count渐渐的显示，其他兄弟渐渐的隐藏  $(&quot;ul li&quot;).eq(count).fadeIn().siblings(&quot;li&quot;).fadeOut();  $(&apos;ol li&apos;).eq(count).css({&apos;background&apos;:&apos;red&apos;}).siblings(&apos;li&apos;).css({&apos;background&apos;:&apos;#fff&apos;});})</code></pre><h2 id="3-进入元素停止定时器，离开开启"><a href="#3-进入元素停止定时器，离开开启" class="headerlink" title="3 进入元素停止定时器，离开开启"></a>3 进入元素停止定时器，离开开启</h2><pre><code>$(&apos;.slider&apos;).hover(function(){      clearInterval(timeId);    },function(){       timeId=setInterval(play,3000);    })</code></pre><p>使用<code>Jquery</code>的好处就是<code>Jquery</code>帮我们封装好了一些函数，可以直接使用，不像<code>js</code>得自己封装，但个中原理都是一样的。</p>]]></content>
      
      
      <categories>
          
          <category> jquery </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>利用js原生代码实现轮播图</title>
      <link href="/2019/01/22/js%E8%BD%AE%E6%92%AD%E5%9B%BE/"/>
      <url>/2019/01/22/js%E8%BD%AE%E6%92%AD%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<p>先说一下整体思路：<code>js</code>原生代码实现轮播图时，存放的图片比我们看到的图片实际上是要多一张的。也就是说，轮播的图片有<code>4</code>张时，实际上是有<code>5</code>张，第<code>5</code>张是和第<code>1</code>张是相同的图片，<code>5</code>张图片从左到右排列，只有盒子内的图片会显示，其他图片隐藏。当轮播到第<code>5</code>张图片的时候，会立即跳转回第<code>1</code>张图片（因为第<code>1</code>张和第<code>5</code>张相同，所以看到的效果是无缝轮播的）</p><h1 id="html代码"><a href="#html代码" class="headerlink" title="html代码"></a>html代码</h1><p><code>&lt;div class=&quot;all&quot; id=&#39;box&#39;&gt;</code><br>  <code>&lt;div class=&quot;screen&quot;&gt;   &lt;!--相框,存放图片--&gt;</code><br>    <code>&lt;ul&gt;</code><br>      <code>&lt;li&gt;&lt;img src=&quot;&quot; width=&quot;500&quot; height=&quot;200&quot;/&gt;&lt;/li&gt;</code><br>      <code>&lt;li&gt;&lt;img src=&quot;&quot; width=&quot;500&quot; height=&quot;200&quot;/&gt;&lt;/li&gt;</code><br>      <code>&lt;li&gt;&lt;img src=&quot;&quot; width=&quot;500&quot; height=&quot;200&quot;/&gt;&lt;/li&gt;</code><br>      <code>&lt;li&gt;&lt;img src=&quot;&quot; width=&quot;500&quot; height=&quot;200&quot;/&gt;&lt;/li&gt;</code><br>    <code>&lt;/ul&gt;</code><br>    <code>&lt;ol&gt;&lt;/ol&gt;   &lt;!--存放和图片对应的列表--&gt;</code><br> <code>&lt;/div&gt;</code><br> <code>&lt;div id=&quot;arr&quot;&gt;</code><br><code>&lt;span id=&quot;left&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span id=&quot;right&quot;&gt;&amp;gt;&lt;/span&gt;</code><br><code>&lt;/div&gt; &lt;!--存放左右箭头--&gt;</code><br><code>&lt;/div&gt;</code></p><h1 id="css代码"><a href="#css代码" class="headerlink" title="css代码"></a>css代码</h1><p> <code>*{</code><br>     <code>padding: 0;</code><br>      <code>margin: 0;</code><br>      <code>list-style: none;</code><br>      <code>border: 0;</code><br>    <code>}</code></p><pre><code>.all {  width: 500px;//和图片宽高保持一致  height: 200px;  padding: 7px;  border: 1px solid #ccc;  margin: 100px auto;  position: relative;}.screen {  width: 500px;  height: 200px;  overflow: hidden;  position: relative;}.screen li {  width: 500px;//和图片宽高保持一致  height: 200px;  overflow: hidden;  float: left;}.screen ul {  position: absolute;  left: 0;  top: 0px;  width: 3000px;}.all ol {  position: absolute;  left: 200px;  bottom: 10px;}.all ol li {  float: left;  width: 10px;  height: 10px;  border-radius:50%;  background-color: #fff;  border: 1px solid #ccc;  margin-left: 10px;  cursor: pointer;}.all ol li.current {  background: #DB192A;}#arr {  display: none;//左右箭头默认不显示}#arr span {  //设置span的公共样式  width: 40px;  height: 40px;  position: absolute;  left: 5px;  top: 50%;  margin-top: -20px;  background: #000;  cursor: pointer;  line-height: 40px;  text-align: center;  font-weight: bold;  font-family: &apos;黑体&apos;;  font-size: 30px;  color: #fff;  opacity: 0.3;  border: 1px solid #fff;}#arr #right {  //重新设置右箭头的位置  right: 5px;  left: auto;}</code></pre><h1 id="js代码"><a href="#js代码" class="headerlink" title="js代码"></a>js代码</h1><h2 id="1-获取所有的元素"><a href="#1-获取所有的元素" class="headerlink" title="1 获取所有的元素"></a>1 获取所有的元素</h2><p><code>//获取最外面的div</code><br>  <code>var box = document.getElementById(&quot;box&quot;);</code><br>  <code>//获取相框</code><br>  <code>var screen = box.children[0];</code><br>  <code>//获取相框的宽度</code><br>  <code>var imgWidth = screen.offsetWidth;</code><br>  <code>//获取ul</code><br>  <code>var ulObj = screen.children[0];</code><br>  <code>//获取ul中的所有的li</code><br>  <code>var list = ulObj.children;</code><br>  <code>//获取ol</code><br>  <code>var olObj = screen.children[1];</code><br>  <code>//左右箭头的div</code><br>  <code>var arr = document.getElementById(&quot;arr&quot;);</code></p><h2 id="2-处理鼠标进入小圆点时图片的跳转"><a href="#2-处理鼠标进入小圆点时图片的跳转" class="headerlink" title="2 处理鼠标进入小圆点时图片的跳转"></a>2 处理鼠标进入小圆点时图片的跳转</h2><p> <code>var pic = 0;//全局变量,存储指定小圆点前照片的个数</code><br>  <code>//创建小圆点----根据ul中的li个数</code><br>  <code>for (var i = 0; i &lt; list.length; i++) {</code><br>    <code>var liObj = document.createElement(&quot;li&quot;);</code><br>    <code>olObj.appendChild(liObj);</code><br>    <code>//在每个ol中的li标签上添加一个自定义属性,存储索引值</code><br>    <code>liObj.setAttribute(&quot;index&quot;, i);</code></p><pre><code>`//注册鼠标进入事件``liObj.onmouseover = function () {` ` //先干掉所有的ol中的li的背景颜色`  `for (var j = 0; j &lt; olObj.children.length; j++) {`   ` olObj.children[j].removeAttribute(&quot;class&quot;);` ` }`  `//设置当前鼠标进来的li的背景颜色`  `this.className = &quot;current&quot;;`  `//获取鼠标进入的li的当前索引值` ` pic = this.getAttribute(&quot;index&quot;);`  `//移动ul`  `animate(ulObj, -pic * imgWidth);``};`</code></pre><p>  <code>}</code><br>  <code>//设置默认ol中第一个li有背景颜色</code><br> <code>olObj.children[0].className = &quot;current&quot;;</code></p><p>  <code>//克隆一个ul中第一个li,加入到ul中的最后=====克隆</code><br>  <code>ulObj.appendChild(ulObj.children[0].cloneNode(true));</code></p><h2 id="3-自动播放"><a href="#3-自动播放" class="headerlink" title="3 自动播放"></a>3 自动播放</h2><p> <code>var timeId= setInterval(clickHandle,1000);</code></p><p> <code>//鼠标进入到box的div显示左右箭头的div</code><br>  <code>box.onmouseover = function () {</code><br>    <code>arr.style.display = &quot;block&quot;;</code><br>    <code>//鼠标进入停止定时器</code><br>    <code>clearInterval(timeId);</code><br>  <code>};</code><br>  <code>//鼠标离开到box的div隐藏左右箭头的div</code><br>  <code>box.onmouseout = function () {</code><br>    <code>arr.style.display = &quot;none&quot;;</code><br>    <code>//鼠标离开自动播放</code><br>   <code>timeId= setInterval(clickHandle,1000);</code><br>  <code>};</code></p><h2 id="4-左右按钮"><a href="#4-左右按钮" class="headerlink" title="4 左右按钮"></a>4 左右按钮</h2><p> <code>//右边按钮</code><br>  <code>document.getElementById(&quot;right&quot;).onclick =clickHandle;</code></p><p>  <code>//左边按钮</code><br>  <code>my$(&quot;left&quot;).onclick = function () {</code><br>   <code>if (pic == 0) {</code><br>     <code>pic = 5;</code><br>      <code>ulObj.style.left = -pic * imgWidth + &quot;px&quot;;</code><br>   <code>}</code><br>    <code>pic--;</code><br>    <code>animate(ulObj, -pic * imgWidth);</code><br>    <code>for (var i = 0; i &lt; olObj.children.length; i++) {</code><br>      <code>olObj.children[i].removeAttribute(&quot;class&quot;);</code><br>    <code>}</code><br>    <code>olObj.children[pic].className = &quot;current&quot;;</code></p><p> <code>};</code></p><h2 id="事件处理函数"><a href="#事件处理函数" class="headerlink" title="事件处理函数"></a>事件处理函数</h2><p>   <code>function clickHandle() {</code><br>    <code>if (pic == list.length - 1) {</code><br>      <code>//如何从第5个图,跳转到第一个图</code><br>     <code>pic = 0;</code><br>      <code>ulObj.style.left = 0 + &quot;px&quot;;//把ul的位置还原成开始的默认位置</code><br>    <code>}</code><br>    <code>pic++;//立刻设置pic加1,那么此时用户就会看到第二个图片了</code><br>    <code>animate(ulObj, -pic * imgWidth);//pic从0的值加1之后,pic的值是1,然后ul移动出去一个图片</code></p><pre><code>if (pic == list.length - 1) {  //第4个按钮颜色干掉  olObj.children[olObj.children.length - 1].className = &quot;&quot;;  //第1个按钮颜色设置上  olObj.children[0].className = &quot;current&quot;;} else {  //去掉所有的小圆点的背景颜色  for (var i = 0; i &lt; olObj.children.length; i++) {    olObj.children[i].removeAttribute(&quot;class&quot;);  olObj.children[pic].className = &quot;current&quot;;}</code></pre><p>  <code>};</code></p><h2 id="设置任意的一个元素-移动到指定的目标位置-动画函数"><a href="#设置任意的一个元素-移动到指定的目标位置-动画函数" class="headerlink" title="设置任意的一个元素,移动到指定的目标位置(动画函数)"></a>设置任意的一个元素,移动到指定的目标位置(动画函数)</h2><p>  <code>function animate(element, target) {</code><br>    <code>clearInterval(element.timeId);</code><br>    <code>element.timeId = setInterval(function () {</code><br>      <code>//获取元素的当前的位置,数字类型</code><br>     <code>var current = element.offsetLeft;</code><br>      <code>//每次移动的距离</code><br>      <code>var step = 10;</code><br>     <code>step = current &lt; target ? step : -step;</code><br>      <code>//当前移动到位置</code><br>      <code>current += step;</code><br>      <code>if (Math.abs(current - target) &gt; Math.abs(step)) {</code><br>        <code>element.style.left = current + &quot;px&quot;;</code><br>      <code>} else {</code><br>        <code>//清理定时器</code><br>        <code>clearInterval(element.timeId);</code><br>        <code>//直接到达目标</code><br>        <code>element.style.left = target + &quot;px&quot;;</code><br>      <code>}</code><br>    <code>}, 10);</code><br>  <code>}</code></p><p>使用<code>js</code>麻烦的地方在于得自己封装函数，然后才能调用，且业务逻辑较复杂，但对于基础学习来说是很重要的。</p>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>利用css布局和定时器实现简单的点名器</title>
      <link href="/2019/01/22/%E7%82%B9%E5%90%8D%E5%99%A8/"/>
      <url>/2019/01/22/%E7%82%B9%E5%90%8D%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p><code>css</code>布局时本来想用表格或者列表来存放每个名字，后来发现不能实现元素之间边距，无奈，只能用<code>div</code>存放.用定时器实现就比较简单了，具体看代码</p><h1 id="html代码"><a href="#html代码" class="headerlink" title="html代码"></a><code>html</code>代码</h1><pre><code>&lt;h1&gt;点名器&lt;/h1&gt;</code></pre><p>  <code>&lt;input type=&quot;button&quot; value=&quot;开始&quot; id=&quot;start&quot;&gt;</code></p><p>  <code>&lt;input type=&quot;button&quot; value=&quot;结束&quot; id=&quot;end&quot;&gt;</code></p><pre><code> &lt;div class=&quot;btn&quot;&gt;       &lt;div&gt;1&lt;/div&gt;       &lt;div&gt;2&lt;/div&gt;       &lt;div&gt;3&lt;/div&gt;       &lt;div&gt;4&lt;/div&gt;       &lt;div&gt;5&lt;/div&gt;       &lt;div&gt;6&lt;/div&gt;       &lt;div&gt;7&lt;/div&gt;       &lt;div&gt;8&lt;/div&gt;       &lt;div&gt;9&lt;/div&gt;       &lt;div&gt;10&lt;/div&gt;       &lt;div&gt;11&lt;/div&gt;       &lt;div&gt;12&lt;/div&gt;       &lt;div&gt;13&lt;/div&gt;       &lt;div&gt;14&lt;/div&gt;       &lt;div&gt;15&lt;/div&gt;&lt;/div&gt;</code></pre><h2 id="css代码"><a href="#css代码" class="headerlink" title="css代码"></a><code>css</code>代码</h2><pre><code>*{    margin:0px;    padding: 0px;}.btn{    width:100%;}  input{    font-size: larger;    margin-left:47.5%;    margin-top: 10px;}.btn div{    width:100px;    height:30px;    margin-left:20px;    margin-top:30px;    float:left;    background-color: green;    text-align: center;}h1 {    color:rgb(201, 18, 79) ;    text-align:center}</code></pre><h3 id="颜色和样式可自行设置，这里本来想用伸缩盒子做一下的，后来想了一下，完全没必要，只要将存放名字的大盒子div的宽度设置为页面宽度就行了，无论我们怎么缩放页面，div盒子都会跟页面宽度一致。"><a href="#颜色和样式可自行设置，这里本来想用伸缩盒子做一下的，后来想了一下，完全没必要，只要将存放名字的大盒子div的宽度设置为页面宽度就行了，无论我们怎么缩放页面，div盒子都会跟页面宽度一致。" class="headerlink" title="颜色和样式可自行设置，这里本来想用伸缩盒子做一下的，后来想了一下，完全没必要，只要将存放名字的大盒子div的宽度设置为页面宽度就行了，无论我们怎么缩放页面，div盒子都会跟页面宽度一致。"></a>颜色和样式可自行设置，这里本来想用伸缩盒子做一下的，后来想了一下，完全没必要，只要将存放名字的大盒子<code>div</code>的宽度设置为页面宽度就行了，无论我们怎么缩放页面，<code>div</code>盒子都会跟页面宽度一致。</h3><h2 id="js代码"><a href="#js代码" class="headerlink" title="js代码"></a><code>js</code>代码</h2><pre><code>var flag=true;//设置节流阀document.getElementById(&apos;start&apos;).onclick=function(){    if(flag==true){      flag=false;//关闭节流阀，防止多次点击触发多个定时器      timeId=setInterval(function(){//定时器不能定义为局部变量，否则不能被clearInterval读取到，也不能被清除      var c=parseInt(Math.random()*15)//通过随机数方法随机点名      document.getElementsByClassName(&apos;btn&apos;)[0].children[c].style.backgroundColor=&apos;red&apos;;      for(i=0;i&lt;document.getElementsByClassName(&apos;btn&apos;)[0].children.length;i++){          if(i!=c){              document.getElementsByClassName(&apos;btn&apos;)[0].children[i].style.backgroundColor=&apos;green&apos;;          }      } //其他兄弟元素设置为原来的颜色，这里用Jquery的siblings方法会更方便一些    },100)    }}document.getElementById(&apos;end&apos;).onclick=function(){    clearInterval(timeId);    flag=true//清除定时器后打开节流阀}</code></pre><h3 id="我这里采用的是直接在页面上放置div元素，也可以通过js代码操作dom在页面上添加div子节点。但是因为操作dom太麻烦了，学完vue之后，就不用直接操作dom了，所以我这里并没有操作dom。"><a href="#我这里采用的是直接在页面上放置div元素，也可以通过js代码操作dom在页面上添加div子节点。但是因为操作dom太麻烦了，学完vue之后，就不用直接操作dom了，所以我这里并没有操作dom。" class="headerlink" title="我这里采用的是直接在页面上放置div元素，也可以通过js代码操作dom在页面上添加div子节点。但是因为操作dom太麻烦了，学完vue之后，就不用直接操作dom了，所以我这里并没有操作dom。"></a>我这里采用的是直接在页面上放置<code>div</code>元素，也可以通过<code>js</code>代码操作<code>dom</code>在页面上添加<code>div</code>子节点。但是因为操作dom太麻烦了，学完vue之后，就不用直接操作dom了，所以我这里并没有操作dom。</h3>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
