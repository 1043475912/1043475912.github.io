<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>找出第20个丑数</title>
      <link href="/2019/08/05/%E7%AE%97%E6%B3%95/%E6%89%BE%E5%87%BA%E7%AC%AC20%E4%B8%AA%E4%B8%91%E6%95%B0/"/>
      <url>/2019/08/05/%E7%AE%97%E6%B3%95/%E6%89%BE%E5%87%BA%E7%AC%AC20%E4%B8%AA%E4%B8%91%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>最小因子只有2、3、5的数，称作丑数（Ugly Number）。例如6、8都是丑数，但14不是，因为它包含因子7，习惯上我们把1当做是第一个丑数<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs undefined">let arr = [1];<br>     for ( i = 2;; i++) &#123;<br>         for ( j = i;; j &gt; 1) &#123;<br>             if (j % 2 == 0) &#123;<br>                 j = j / 2;<br>             &#125; else if (j % 3 == 0) &#123;<br>                 j = j / 3;<br>             &#125; else if (j % 5 == 0) &#123;<br>                 j = j / 5;<br>             &#125; else &#123;<br>                 break;<br>             &#125;<br>         &#125;<br>         if(j==1)&#123;<br>             arr.push(i)<br>         &#125;<br>         if(arr.length==20)&#123;<br>             break;<br>         &#125;<br><br>     &#125;<br>     console.log(arr[19]);<br></code></pre></td></tr></table></figure></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路:"></a>思路:</h2><h2 id="1-从小到大遍历大于1的数-寻找它的最小公因子"><a href="#1-从小到大遍历大于1的数-寻找它的最小公因子" class="headerlink" title="1.从小到大遍历大于1的数,寻找它的最小公因子"></a>1.从小到大遍历大于1的数,寻找它的最小公因子</h2><h2 id="2-若最小公因子只包含2-3-5则将此数放进数组中"><a href="#2-若最小公因子只包含2-3-5则将此数放进数组中" class="headerlink" title="2.若最小公因子只包含2,3,5则将此数放进数组中"></a>2.若最小公因子只包含2,3,5则将此数放进数组中</h2><h2 id="3-数组长度到达20后停止循环"><a href="#3-数组长度到达20后停止循环" class="headerlink" title="3.数组长度到达20后停止循环"></a>3.数组长度到达20后停止循环</h2>]]></content>
      
      
      <categories>
          
          <category> 简单算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>找出数组中每个字母出现的次数及统计出现次数最多的字母</title>
      <link href="/2019/06/21/%E7%AE%97%E6%B3%95/%E5%8E%BB%E9%99%A4%E6%95%B0%E7%BB%84%E4%B8%AD%E6%8C%87%E5%AE%9A%E4%B8%8B%E6%A0%87%E7%9A%84%E5%85%83%E7%B4%A0/"/>
      <url>/2019/06/21/%E7%AE%97%E6%B3%95/%E5%8E%BB%E9%99%A4%E6%95%B0%E7%BB%84%E4%B8%AD%E6%8C%87%E5%AE%9A%E4%B8%8B%E6%A0%87%E7%9A%84%E5%85%83%E7%B4%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="这里举例说明如何实现，给定数组arr和要去除下标的数组，如"><a href="#这里举例说明如何实现，给定数组arr和要去除下标的数组，如" class="headerlink" title="这里举例说明如何实现，给定数组arr和要去除下标的数组，如:"></a>这里举例说明如何实现，给定数组arr和要去除下标的数组，如:</h1><p><code>let arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],choosed = [3, 5, 6]</code></p><h2 id="去除arr中数组下标为3-5-6-即去除arr中的4-6-7"><a href="#去除arr中数组下标为3-5-6-即去除arr中的4-6-7" class="headerlink" title="去除arr中数组下标为3,5,6,即去除arr中的4,6,7"></a>去除arr中数组下标为3,5,6,即去除arr中的4,6,7</h2><h3 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h3><p><code>for(let i=0;i&lt;choosed.length;i++){</code><br> &emsp;&emsp;<code>arr[choosed[i]]=&#39;&#39;</code><br>         <code>}</code></p><p> <code>for(let i=0;i&lt;arr.length;i++){</code><br> &emsp;&emsp;<code>if(arr[i]==&#39;&#39;){</code><br> &emsp;&emsp;&emsp;<code>arr.splice(i,1);</code><br> &emsp;&emsp;&emsp;<code>i--;</code><br> &emsp;&emsp;<code>}</code><br>         <code>}</code></p><h4 id="思路"><a href="#思路" class="headerlink" title="思路:"></a>思路:</h4><p> 先将数组中指定下标的元素替换成空字符串,然后再用splice方法去除,去除时因为数组长度可变,需要将下标自减1</p><h3 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h3><p><code>for (let i = 0; i &lt; choosed.length; i++) {</code><br>&emsp;&emsp;<code>choosed[i] = choosed[i] - i;</code><br>&emsp;&emsp;<code>arr.splice(choosed[i], 1)</code><br><code>}</code></p><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路:"></a>思路:</h4><p>去除数组元素时,因为数组长度动态变化,则去除元素时去除下标为3的元素时正常去除,去除下标为5的元素时变为去除变化后的数组第5-1个元素,去除下标为6的元素时变为去除变化后的数组第6-2个元素,以此类推,每个choosed元素都应减去choosed数组元素下标值,再用splice方法去除.</p>]]></content>
      
      
      <categories>
          
          <category> 简单算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>跳台阶和变态跳台阶</title>
      <link href="/2019/03/26/%E7%AE%97%E6%B3%95/%E8%B7%B3%E5%8F%B0%E9%98%B6/"/>
      <url>/2019/03/26/%E7%AE%97%E6%B3%95/%E8%B7%B3%E5%8F%B0%E9%98%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="1-普通跳台阶-假设有N阶台阶-每次只能跳1阶或2阶-问跳上N阶台阶有多少种跳法"><a href="#1-普通跳台阶-假设有N阶台阶-每次只能跳1阶或2阶-问跳上N阶台阶有多少种跳法" class="headerlink" title="1.普通跳台阶:假设有N阶台阶,每次只能跳1阶或2阶,问跳上N阶台阶有多少种跳法?"></a>1.普通跳台阶:假设有N阶台阶,每次只能跳1阶或2阶,问跳上N阶台阶有多少种跳法?</h3><p>先上代码,再分析思路<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs undefined">function jump(n)&#123;<br>     if(n==1) return 1<br>     if(n==2) return 2<br>     return jump(n-1)+jump(n-2)<br> &#125;<br></code></pre></td></tr></table></figure></p><p>从代码可以看出,就是一个普通的递归而已.如果我们去找规律的话,就会发现是一个斐波那契数列.但这种方法只能看到部分,后续就未必正确了.<br>正确思路是:假设跳N阶台阶,那只能是跳N-1阶再跳1阶,或者最后跳N-2阶再跳2阶,所以<br><code>jump(n)=jump(n-1)+jump(n-2)</code></p><h3 id="2-变态跳台阶-假设有N阶台阶-每次可以跳1阶-2阶-3阶…-n阶-问跳上N阶台阶有多少种跳法"><a href="#2-变态跳台阶-假设有N阶台阶-每次可以跳1阶-2阶-3阶…-n阶-问跳上N阶台阶有多少种跳法" class="headerlink" title="2.变态跳台阶:假设有N阶台阶,每次可以跳1阶,2阶,3阶….n阶.问跳上N阶台阶有多少种跳法?"></a>2.变态跳台阶:假设有N阶台阶,每次可以跳1阶,2阶,3阶….n阶.问跳上N阶台阶有多少种跳法?</h3><p>依然先看代码,再分析思路<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs undefined">function jump(n)&#123;<br>     if(n==1) return 1<br>     return 2*jump(n-1)<br> &#125;<br></code></pre></td></tr></table></figure></p><p>变态跳台阶和跳台阶区别就是每次跳的步数是随机的,则跳N阶台阶可以最后跳1阶,2阶,…N阶.所以<br><code>jump(n)=jump(n-1)+jump(n-2)+....+jump(1)+1,</code><br>这里的1是指依次跳完所有台阶.而由递推可以得到<br><code>jump(n-1)=jump(n-2)+jump(n-3)+....+jump(1)+1</code><br>所以<br><code>jump(n)=2*jump(n-1)</code></p>]]></content>
      
      
      <categories>
          
          <category> 简单算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>长度为N的数组找出和为M的数组元素组合</title>
      <link href="/2019/03/20/%E7%AE%97%E6%B3%95/%E9%95%BF%E5%BA%A6%E4%B8%BAN%E7%9A%84%E6%95%B0%E7%BB%84%E6%89%BE%E5%87%BA%E5%92%8C%E4%B8%BAM%E7%9A%84%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0%E7%BB%84%E5%90%88/"/>
      <url>/2019/03/20/%E7%AE%97%E6%B3%95/%E9%95%BF%E5%BA%A6%E4%B8%BAN%E7%9A%84%E6%95%B0%E7%BB%84%E6%89%BE%E5%87%BA%E5%92%8C%E4%B8%BAM%E7%9A%84%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0%E7%BB%84%E5%90%88/</url>
      
        <content type="html"><![CDATA[<p>从长度为N的数组中找出和为M的数组元素组合，如[1,2,3,4,5,10,11]中找出和为10的元素的组合.[1,2,3,4],[1,4,5],[2,3,5],[10],除此之外，再无其他组合<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs undefined">var oldArr=[5,4,11,10,3,1,2] <br>排序算法不再赘述，排序后去除大于sum的元素   <br>var arr=[1,2,3,4,5,10]<br>var sum=10<br>for(i=1;i&lt;1&lt;&lt;arr.length;i++)&#123; //从1到2^N进行遍历，0000001~1111111<br>    var bit=i.toString(2).padStart(arr.length,&apos;0&apos;) //十进制转化为二进制后位数不够要补0<br>    var arr1=[]<br>    for(j=0;j&lt;bit.length;j++)&#123;<br>        if(bit[j]==1)&#123;      //二进制数第j位是1则取出数组中对应的元素，存入新数组中<br>            arr1.push(arr[j])   <br>        &#125;<br>    &#125;<br>    var sum1=0<br>    for(k=0;k&lt;arr1.length;k++)&#123;<br>        sum1+=arr1[k]<br>    &#125;<br>    if(sum==sum1)&#123;         //判断新数组元素和是否和要求的sum一样，一样则输出<br>        console.log(arr1)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路:"></a>思路:</h2><h2 id="1-将数组排序，将大于sum的数组元素去除"><a href="#1-将数组排序，将大于sum的数组元素去除" class="headerlink" title="1.将数组排序，将大于sum的数组元素去除"></a>1.将数组排序，将大于sum的数组元素去除</h2><h2 id="2-利用二进制数，如长度为5，则范围是00000-11111"><a href="#2-利用二进制数，如长度为5，则范围是00000-11111" class="headerlink" title="2.利用二进制数，如长度为5，则范围是00000-11111"></a>2.利用二进制数，如长度为5，则范围是00000-11111</h2><h2 id="3-遍历二进制数，0代表未选中，1代表选中，选中则取出"><a href="#3-遍历二进制数，0代表未选中，1代表选中，选中则取出" class="headerlink" title="3.遍历二进制数，0代表未选中，1代表选中，选中则取出"></a>3.遍历二进制数，0代表未选中，1代表选中，选中则取出</h2><h2 id="4-取出的元素求和判断是否等于sum"><a href="#4-取出的元素求和判断是否等于sum" class="headerlink" title="4.取出的元素求和判断是否等于sum"></a>4.取出的元素求和判断是否等于sum</h2><p>这里利用二进制数最巧妙的地方在于可以进行数组元素的组合且不会重复。以后进行排列组合时可优先选用此法。</p>]]></content>
      
      
      <categories>
          
          <category> 简单算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>判断括号匹配的正确性</title>
      <link href="/2019/03/18/%E7%AE%97%E6%B3%95/%E5%88%A4%E6%96%AD%E6%8B%AC%E5%8F%B7%E5%8C%B9%E9%85%8D%E7%AC%A6%E7%9A%84%E6%AD%A3%E7%A1%AE%E6%80%A7/"/>
      <url>/2019/03/18/%E7%AE%97%E6%B3%95/%E5%88%A4%E6%96%AD%E6%8B%AC%E5%8F%B7%E5%8C%B9%E9%85%8D%E7%AC%A6%E7%9A%84%E6%AD%A3%E7%A1%AE%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="给你一个由小括号组成的字符串，如’-’-’-‘-判断括号是否符合正常括号匹配"><a href="#给你一个由小括号组成的字符串，如’-’-’-‘-判断括号是否符合正常括号匹配" class="headerlink" title="给你一个由小括号组成的字符串，如’(()())’,’(())(‘,判断括号是否符合正常括号匹配"></a>给你一个由小括号组成的字符串，如’(()())’,’(())(‘,判断括号是否符合正常括号匹配</h2><h2 id="先看代码再解释"><a href="#先看代码再解释" class="headerlink" title="先看代码再解释"></a>先看代码再解释</h2><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs undefined">var str=&apos;(())()&apos;<br>  var arr=str.split(&apos;&apos;);<br>    if(arr.length%2!=0) &#123;<br>      console.log(&apos;不能正常匹配&apos;)<br>  &#125;  <br>  for(i=0;i&lt;arr.length;i++)&#123;<br>      if(arr[i]==&quot;)&quot;&amp;&amp;arr[i-1]==&apos;(&apos;)&#123;  <br>              arr.splice(i-1,2)<br>              i=i-2;<br>      &#125;<br>  &#125;<br>  console.log(arr.length);<br></code></pre></td></tr></table></figure><h1 id="思路是先将字符串转化为数组，然后判断数组的长度是否为偶数，不是偶数肯定不匹配，是偶数就寻找第一个’-’出现的位置，然后正确的匹配括号，前一个肯定是’-‘-匹配成功后再将这一对括号移除-循环次数i要减去2，继而从0开始寻找-，然后继续寻找第一个’-’和前面的’-‘-如果匹配，最后数组会被清空。"><a href="#思路是先将字符串转化为数组，然后判断数组的长度是否为偶数，不是偶数肯定不匹配，是偶数就寻找第一个’-’出现的位置，然后正确的匹配括号，前一个肯定是’-‘-匹配成功后再将这一对括号移除-循环次数i要减去2，继而从0开始寻找-，然后继续寻找第一个’-’和前面的’-‘-如果匹配，最后数组会被清空。" class="headerlink" title="思路是先将字符串转化为数组，然后判断数组的长度是否为偶数，不是偶数肯定不匹配，是偶数就寻找第一个’)’出现的位置，然后正确的匹配括号，前一个肯定是’(‘,匹配成功后再将这一对括号移除(循环次数i要减去2，继而从0开始寻找)，然后继续寻找第一个’)’和前面的’(‘,如果匹配，最后数组会被清空。"></a>思路是先将字符串转化为数组，然后判断数组的长度是否为偶数，不是偶数肯定不匹配，是偶数就寻找第一个’)’出现的位置，然后正确的匹配括号，前一个肯定是’(‘,匹配成功后再将这一对括号移除(循环次数i要减去2，继而从0开始寻找)，然后继续寻找第一个’)’和前面的’(‘,如果匹配，最后数组会被清空。</h1>]]></content>
      
      
      <categories>
          
          <category> 简单算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数组乱序</title>
      <link href="/2019/03/17/%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84%E4%B9%B1%E5%BA%8F/"/>
      <url>/2019/03/17/%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84%E4%B9%B1%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="给你一个排好序的数组，如何将数组的顺序打乱？先看代码，再解释"><a href="#给你一个排好序的数组，如何将数组的顺序打乱？先看代码，再解释" class="headerlink" title="给你一个排好序的数组，如何将数组的顺序打乱？先看代码，再解释"></a>给你一个排好序的数组，如何将数组的顺序打乱？先看代码，再解释</h2><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs undefined">var arr=[1,2,3,4,5,6,7,8,9,10]<br>var arr1=[],flag=arr.length<br>for(i=0;i&lt;flag;i++)&#123;<br>  var a=Math.floor(Math.random()*arr.length)<br>  arr1.push(arr.splice(a,1))<br>&#125;<br>console.log(arr1)<br></code></pre></td></tr></table></figure><p>原来我的思想用数组自带的方法reverse，pop，push，shift，unshift等方法，但那样操作只能每次打乱两个元素，我们可以利用数组长度的可变性和随机数来实现。</p><h1 id="1-我们先抛一个0到数组长度-1之间的随机数，将随机数下标的元素压入一个新数组中，此时数组长度会减1，后面的元素会依次补上空位"><a href="#1-我们先抛一个0到数组长度-1之间的随机数，将随机数下标的元素压入一个新数组中，此时数组长度会减1，后面的元素会依次补上空位" class="headerlink" title="1.我们先抛一个0到数组长度-1之间的随机数，将随机数下标的元素压入一个新数组中，此时数组长度会减1，后面的元素会依次补上空位"></a>1.我们先抛一个0到数组长度-1之间的随机数，将随机数下标的元素压入一个新数组中，此时数组长度会减1，后面的元素会依次补上空位</h1><h1 id="2-再次调用随机数时，随机数范围会减小，即使取的随机数相同，随机数下标下的数组元素也不相同，调用arr-length次随机数后arr的元素全部乱序压入arr1中"><a href="#2-再次调用随机数时，随机数范围会减小，即使取的随机数相同，随机数下标下的数组元素也不相同，调用arr-length次随机数后arr的元素全部乱序压入arr1中" class="headerlink" title="2.再次调用随机数时，随机数范围会减小，即使取的随机数相同，随机数下标下的数组元素也不相同，调用arr.length次随机数后arr的元素全部乱序压入arr1中"></a>2.再次调用随机数时，随机数范围会减小，即使取的随机数相同，随机数下标下的数组元素也不相同，调用arr.length次随机数后arr的元素全部乱序压入arr1中</h1>]]></content>
      
      
      <categories>
          
          <category> 简单算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>web存储两种方式的异同</title>
      <link href="/2019/03/11/HTML/web%E5%AD%98%E5%82%A8/"/>
      <url>/2019/03/11/HTML/web%E5%AD%98%E5%82%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="localStorage"><a href="#localStorage" class="headerlink" title="localStorage"></a>localStorage</h1><p>localStorage存储的数据是存储在硬盘上的，能存储20M左右，它可以跨页面访问，但不能跨浏览器访问，生命周期是永久，只能手动清除</p><h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><p><code>localStorage.setItem(&#39;username&#39;,&#39;Tom&#39;)</code></p><h2 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h2><p><code>localStorage.getItem(&#39;username&#39;)</code></p><h2 id="清除"><a href="#清除" class="headerlink" title="清除"></a>清除</h2><p><code>localStorage.removeItem(&#39;username&#39;)</code></p><h1 id="sessionStorage"><a href="#sessionStorage" class="headerlink" title="sessionStorage"></a>sessionStorage</h1><p>sessionStorage是存储在当前页面中的，能存5M左右，不能跨页面更不能跨浏览器访问，生命周期是页面存在的时间，关闭页面清除</p><h2 id="设置-1"><a href="#设置-1" class="headerlink" title="设置"></a>设置</h2><p><code>sessionStorage.setItem(&#39;username&#39;,&#39;Tom&#39;)</code></p><h2 id="获取-1"><a href="#获取-1" class="headerlink" title="获取"></a>获取</h2><p><code>sessionStorage.getItem(&#39;username&#39;)</code></p><h2 id="清除-1"><a href="#清除-1" class="headerlink" title="清除"></a>清除</h2><p><code>sessionStorage.removeItem(&#39;username&#39;)</code></p><h2 id="以上两种存储方式都比cookie存储数据量要大，cookie存储量只有4k左右"><a href="#以上两种存储方式都比cookie存储数据量要大，cookie存储量只有4k左右" class="headerlink" title="以上两种存储方式都比cookie存储数据量要大，cookie存储量只有4k左右"></a>以上两种存储方式都比cookie存储数据量要大，cookie存储量只有4k左右</h2>]]></content>
      
      
      <categories>
          
          <category> HTML5 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>判断一个字符串是否是另一个字符串的子字符串</title>
      <link href="/2019/02/28/%E7%AE%97%E6%B3%95/%E5%88%A4%E6%96%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%98%AF%E5%90%A6%E6%98%AF%E5%8F%A6%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2019/02/28/%E7%AE%97%E6%B3%95/%E5%88%A4%E6%96%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%98%AF%E5%90%A6%E6%98%AF%E5%8F%A6%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="判断两个字符串的关系时，可以在长字符串中截取与短字符串相等长度的字符串进行比较，看下面代码："><a href="#判断两个字符串的关系时，可以在长字符串中截取与短字符串相等长度的字符串进行比较，看下面代码：" class="headerlink" title="判断两个字符串的关系时，可以在长字符串中截取与短字符串相等长度的字符串进行比较，看下面代码："></a>判断两个字符串的关系时，可以在长字符串中截取与短字符串相等长度的字符串进行比较，看下面代码：</h2><p> <code>function judge(son,father){</code><br>       &emsp;<code>for(i=0;i&lt;father.length;i++){</code><br>           &emsp; &emsp;<code>if(son[0]==father[i]){</code><br>             &emsp; &emsp;<code>return father.slice(i,i+son.length)==son;</code><br>          &emsp; &emsp; &emsp; <code>}</code><br>       &emsp; &emsp;<code>}</code></p><p> <code>}</code> </p><p><code>document.writeln(judge(&#39;ab&#39;,&#39;abc&#39;))</code></p><h2 id="另外一种比较简单的方法就是判断短字符串在长字符串中的位置"><a href="#另外一种比较简单的方法就是判断短字符串在长字符串中的位置" class="headerlink" title="另外一种比较简单的方法就是判断短字符串在长字符串中的位置"></a>另外一种比较简单的方法就是判断短字符串在长字符串中的位置</h2><p><code>document.writeln(&#39;abc&#39;.indexOf(&#39;ab&#39;)&gt;-1?true:false)</code></p>]]></content>
      
      
      <categories>
          
          <category> 简单算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>用CSS实现元素内容居中</title>
      <link href="/2019/02/21/CSS/%E5%AE%9E%E7%8E%B0%E5%85%83%E7%B4%A0%E5%B1%85%E4%B8%AD/"/>
      <url>/2019/02/21/CSS/%E5%AE%9E%E7%8E%B0%E5%85%83%E7%B4%A0%E5%B1%85%E4%B8%AD/</url>
      
        <content type="html"><![CDATA[<h1 id="1-水平居中"><a href="#1-水平居中" class="headerlink" title="1.水平居中"></a>1.水平居中</h1><p>##实现水平居中是最简单的,使用text-align即可<br><code>div{</code><br>    <code>width:300px;</code><br>    <code>height:300px;</code><br>    <code>text-align:center;</code><br>    <code>border: 1px solid black;</code><br><code>}</code></p><h1 id="2-垂直居中"><a href="#2-垂直居中" class="headerlink" title="2.垂直居中"></a>2.垂直居中</h1><p>##实现垂直居中只介绍比较简单的2种方法</p><p>##2.1 设置行高与元素高度一致(只适用于1行内容)<br><code>div{</code><br>    <code>width:300px;</code><br>    <code>height:300px;</code><br>    <code>line-height:300px;</code><br>    <code>border: 1px solid black;</code><br><code>}</code></p><p>##2.2 css动画实现（将内容放入p标签中）<br><code>div{</code><br>    <code>position: relative;</code><br>    <code>width: 300px;</code><br>    <code>height: 300px;</code><br>    <code>border: 1px solid red;</code></p><p><code>}</code><br><code>p{</code><br>   <code>position: absolute;</code><br>   <code>width: 150px;</code><br>   <code>top: 50%;</code><br>   <code>left:50%;</code><br>   <code>transform: translate(-50%,-50%);</code><br>   <code>border: 1px solid black;</code><br> }</p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>用CSS实现各种几何图形</title>
      <link href="/2019/02/21/CSS/css%E5%AE%9E%E7%8E%B0%E5%87%A0%E4%BD%95%E5%9B%BE%E5%BD%A2/"/>
      <url>/2019/02/21/CSS/css%E5%AE%9E%E7%8E%B0%E5%87%A0%E4%BD%95%E5%9B%BE%E5%BD%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="1-矩形"><a href="#1-矩形" class="headerlink" title="1.矩形"></a>1.矩形</h1><p>##实现矩形是最简单的，只需设置块元素的宽高和颜色即可<br><code>div{</code><br><code>width:100px;</code><br><code>height:200px;</code><br><code>background-color:blue;</code></p><p><code>}</code></p><h1 id="2-三角形"><a href="#2-三角形" class="headerlink" title="2.三角形"></a>2.三角形</h1><p>##实现三角形只需将元素的宽高和内填充设为0，只剩边框即可<br><code>div{</code><br><code>width:0px;</code><br><code>height:0px;</code><br><code>border-width:5px;</code><br><code>border-style:solid;</code><br><code>border-color:blue red green skyblue</code><br><code>}</code></p><p>##如果只想要1个三角形，将其他3个边框的颜色变成透明(transparent)即可</p><h1 id="3-圆形（椭圆形）"><a href="#3-圆形（椭圆形）" class="headerlink" title="3.圆形（椭圆形）"></a>3.圆形（椭圆形）</h1><p>##实现圆形（椭圆形）只需控制元素的四个角的圆角圆心位置即可<br><code>div{</code><br><code>width:100px;</code><br><code>height:100px;</code><br><code>border-radius:50%/50%;</code><br><code>}</code></p><p>##div为正方形时可画圆，为矩形时可画椭圆。由此也可延伸出画半圆，1/4圆等，比较简单，这里不详述了。</p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数组去重</title>
      <link href="/2019/02/21/%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D/"/>
      <url>/2019/02/21/%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="这里采用ES6中新引入的数据结构Set进行去重，简单又实用"><a href="#这里采用ES6中新引入的数据结构Set进行去重，简单又实用" class="headerlink" title="这里采用ES6中新引入的数据结构Set进行去重，简单又实用"></a>这里采用ES6中新引入的数据结构Set进行去重，简单又实用</h1><p><code>var arr=[&#39;a&#39;,&#39;a&#39;,1,1,NaN,NaN,{},{},[],[]];</code><br><code>var set1=new Set(arr);</code><br><code>var arr1=Array.from(set1)</code></p><h2 id="数组去重的一个缺陷就是不管用es5还是es6方法，NaN都只能存在一个，但每一个NaN都不相等。所以要使用es6中的isNaN方法将去掉的NaN重新加上"><a href="#数组去重的一个缺陷就是不管用es5还是es6方法，NaN都只能存在一个，但每一个NaN都不相等。所以要使用es6中的isNaN方法将去掉的NaN重新加上" class="headerlink" title="!!! 数组去重的一个缺陷就是不管用es5还是es6方法，NaN都只能存在一个，但每一个NaN都不相等。所以要使用es6中的isNaN方法将去掉的NaN重新加上"></a>!!! 数组去重的一个缺陷就是不管用es5还是es6方法，NaN都只能存在一个，但每一个NaN都不相等。所以要使用es6中的isNaN方法将去掉的NaN重新加上</h2><p><code>var flag=0;</code><br><code>for(i=0;i&lt;arr.length;i++){</code><br>   &emsp;<code>if(Number.isNaN(arr[i])==true){</code><br>   &emsp;&emsp;&emsp;&emsp;<code>flag++;</code><br><code>}</code><br>&emsp;<code>}</code></p><h2 id="此时可以判断出原数组有多少个NaN，再加入arr1中即可"><a href="#此时可以判断出原数组有多少个NaN，再加入arr1中即可" class="headerlink" title="此时可以判断出原数组有多少个NaN，再加入arr1中即可"></a>此时可以判断出原数组有多少个NaN，再加入arr1中即可</h2><p><code>if(flag==0||flag==1)</code><br>&emsp;&emsp;<code>console.log(arr1)</code><br><code>else{for(i=1;i&lt;flag;i++){</code><br>&emsp;<code>arr1.push(NaN)}</code><br>&emsp;&emsp;<code>console.log(arr1);}</code></p>]]></content>
      
      
      <categories>
          
          <category> 简单算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>找出数组中每个字母出现的次数及统计出现次数最多的字母</title>
      <link href="/2019/02/21/%E7%AE%97%E6%B3%95/%E6%89%BE%E5%87%BA%E6%95%B0%E7%BB%84%E4%B8%AD%E6%AF%8F%E4%B8%AA%E5%AD%97%E6%AF%8D%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0/"/>
      <url>/2019/02/21/%E7%AE%97%E6%B3%95/%E6%89%BE%E5%87%BA%E6%95%B0%E7%BB%84%E4%B8%AD%E6%AF%8F%E4%B8%AA%E5%AD%97%E6%AF%8D%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="这里举例说明如何实现，给定任一数组，代码如下"><a href="#这里举例说明如何实现，给定任一数组，代码如下" class="headerlink" title="这里举例说明如何实现，给定任一数组，代码如下:"></a>这里举例说明如何实现，给定任一数组，代码如下:</h1><p><code>var arr=[&#39;a&#39;,&#39;a&#39;,&#39;a&#39;,&#39;a&#39;,&#39;a&#39;,&#39;b&#39;,&#39;b&#39;,&#39;b&#39;,&#39;c&#39;,&#39;c&#39;,&#39;d&#39;,&#39;d&#39;,&#39;d&#39;,&#39;d&#39;,&#39;e&#39;];</code><br><code>var obj={};</code><br><code>for(i=0;i&lt;arr.length;i++){</code><br>&emsp;<code>var key=arr[i];</code><br>&emsp;&emsp;<code>if(!obj[key]){</code><br>&emsp;&emsp;&emsp;<code>obj[key]=1;</code><br>&emsp;&emsp;<code>}else{</code><br>&emsp;&emsp;&emsp;<code>obj[key]++;</code><br>&emsp;<code>}</code><br>&emsp;&emsp;<code>}</code></p><h2 id="此时得到了一个对象，键存储字母，值存储字母出现的次数-下面再将对象的值存储在数组中"><a href="#此时得到了一个对象，键存储字母，值存储字母出现的次数-下面再将对象的值存储在数组中" class="headerlink" title="此时得到了一个对象，键存储字母，值存储字母出现的次数,下面再将对象的值存储在数组中:"></a>此时得到了一个对象，键存储字母，值存储字母出现的次数,下面再将对象的值存储在数组中:</h2><p><code>var arr2=[];</code><br><code>for(key in obj){</code><br>&emsp;<code>arr2.push(obj[key])</code><br><code>}</code></p><h2 id="此时找寻arr2中的最大值"><a href="#此时找寻arr2中的最大值" class="headerlink" title="此时找寻arr2中的最大值"></a>此时找寻arr2中的最大值</h2><p><code>max=Math.max(...arr2)</code></p><h2 id="找寻arr2中的最大值对应的obj中的键"><a href="#找寻arr2中的最大值对应的obj中的键" class="headerlink" title="找寻arr2中的最大值对应的obj中的键"></a>找寻arr2中的最大值对应的obj中的键</h2><p><code>for( key in obj){</code><br>&emsp;<code>if(obj[key]==max){</code><br>&emsp;&emsp;<code>console.log(&#39;字母&#39;+key+&#39;出现的次数最多，出现了&#39;+max+&#39;次&#39;)</code><br><code>}</code><br>&emsp;<code>}</code></p><h2 id="结果是字母a出现的次数最多，出现了5次"><a href="#结果是字母a出现的次数最多，出现了5次" class="headerlink" title="结果是字母a出现的次数最多，出现了5次"></a>结果是字母a出现的次数最多，出现了5次</h2>]]></content>
      
      
      <categories>
          
          <category> 简单算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>利用三维变换实现轮播图</title>
      <link href="/2019/01/23/CSS/3D%E8%BD%AE%E6%92%AD%E5%9B%BE/"/>
      <url>/2019/01/23/CSS/3D%E8%BD%AE%E6%92%AD%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<p>同样再说一下整体思路：<code>HTML5</code>实现轮播图时，是所有图片叠放在一个位置，然后通过平移和旋转，形成立方体的4个面，通过旋转立方体实现图片轮播，这里主要熟悉三维变换，缺点就是只能轮播4个图片。</p><h1 id="html代码"><a href="#html代码" class="headerlink" title="html代码"></a>html代码</h1><p><code>&lt;div class=&quot;view&quot;&gt;</code><br>   <code>&lt;ul&gt;</code><br>        <code>&lt;!--一个li就是一个结构块,包括4个面--&gt;</code><br>        <code>&lt;li&gt;</code><br>           <code>&lt;!--每一个span是这个结构块中的某一个面，用来显示图片--&gt;</code><br>            <code>&lt;span&gt;&lt;/span&gt;</code><br>            <code>&lt;span&gt;&lt;/span&gt;</code><br>            <code>&lt;span&gt;&lt;/span&gt;</code><br>            <code>&lt;span&gt;&lt;/span&gt;</code><br>        <code>&lt;/li&gt;</code><br>    <code>&lt;/ul&gt;</code><br>    <code>&lt;div class=&quot;arrow&quot;&gt;</code><br>    <code>&lt;a class=&quot;pre&quot;&gt;&amp;lt;&lt;/a&gt;</code><br>    <code>&lt;a class=&quot;next&quot;&gt;&amp;gt;&lt;/a&gt;</code><br><code>&lt;/div&gt;</code><br><code>&lt;/div&gt;</code></p><h2 id="这里我只用了一个结构块，可以看到我们所见的图片轮播，也可以用多个结构块实现切割轮播"><a href="#这里我只用了一个结构块，可以看到我们所见的图片轮播，也可以用多个结构块实现切割轮播" class="headerlink" title="这里我只用了一个结构块，可以看到我们所见的图片轮播，也可以用多个结构块实现切割轮播"></a>这里我只用了一个结构块，可以看到我们所见的图片轮播，也可以用多个结构块实现切割轮播</h2><h1 id="css代码"><a href="#css代码" class="headerlink" title="css代码"></a>css代码</h1><pre><code>*{    padding: 0;    margin: 0;}.view{    width: 560px;    height: 300px;    margin:100px auto;    position: relative;}ul{    width: 100%;    height: 100%;    list-style: none;    /*transform: rotate3d(1,1,0,-30deg); 旋转才能看到立方体*/    transform-style: preserve-3d;}ul &gt; li{    width: 100%;    height: 100%;    float: left;    position: relative;    transform-style: preserve-3d;    /*添加过渡效果*/    transition: transform 0.5s;}ul &gt; li &gt; span{    width: 100%;    height: 100%;    position: absolute;    left: 0;    top: 0;}ul &gt; li &gt; span:nth-of-type(1) {    background: url(&quot;&quot;);    /*往z轴正方向偏移*/    transform: translateZ(150px);}ul &gt; li &gt; span:nth-of-type(2){    background: url(&quot;&quot;);    transform: translateY(-150px) rotateX(90deg);}ul &gt; li &gt; span:nth-of-type(3){    background: url(&quot;&quot;);    transform: translateZ(-150px) rotateX(180deg);}ul &gt; li &gt; span:nth-of-type(4){    background: url(&quot;&quot;);    transform: translateY(150px) rotateX(-90deg);}.pre,.next{    width: 60px;    height: 60px;    text-align: center;    line-height:60px;    position: absolute;    top: 50%;    font-size: 40px;    transform: translate(0,-50%);    background-color: rgba(0,0,0,0.5);    color: #fff;}.arrow{    width:560px;    height:50px;    display: none;}.view:hover .arrow{    display: block;}.pre:hover,.next:hover {    cursor: pointer;}.pre{    left: 0;}.next{    right: 0;}</code></pre><h2 id="用css3代码可以实现元素的移动和旋转，好处就是可以代替一部分js代码，所以这里的css代码多了点"><a href="#用css3代码可以实现元素的移动和旋转，好处就是可以代替一部分js代码，所以这里的css代码多了点" class="headerlink" title="用css3代码可以实现元素的移动和旋转，好处就是可以代替一部分js代码，所以这里的css代码多了点"></a>用<code>css3</code>代码可以实现元素的移动和旋转，好处就是可以代替一部分<code>js</code>代码，所以这里的<code>css</code>代码多了点</h2><h1 id="Jquery代码"><a href="#Jquery代码" class="headerlink" title="Jquery代码"></a>Jquery代码</h1><h2 id="1-自动播放"><a href="#1-自动播放" class="headerlink" title="1 自动播放"></a>1 自动播放</h2><p> <code>var timeId=setInterval(play,3000);</code><br>       <code>var count=0;</code><br>        <code>function play(){</code><br>        <code>count++;</code></p><pre><code>     $(&quot;li&quot;).each(function(key,value){ //0 1 2 3 4              /*通过添加transform样式进行旋转*/              $(this).css({                  &quot;transform&quot;:&quot;rotateX(&quot;+(-count*90)+&quot;deg)&quot;              });          }); }</code></pre><h2 id="2-左右箭头"><a href="#2-左右箭头" class="headerlink" title="2 左右箭头"></a>2 左右箭头</h2><pre><code>/*定义图片索引*/var index=0;/*添加节流阀 */var flag=true;/*下一张*/$(&quot;.next&quot;).on(&quot;click&quot;,function(){    if(flag==true){        /*设置节流阀*/        flag=false;        index--;        /*所谓下一张，就是将所有li元素围绕x旋转*/        $(&quot;li&quot;).each(function(key,value){ //0 1 2 3 4            /*通过添加transform样式进行旋转*/            $(this).css({                &quot;transform&quot;:&quot;rotateX(&quot;+(index*90)+&quot;deg)&quot;            });        });        setTimeout(function(){            flag=true;        },1000);//延迟1秒用户才能再次点击，防止用户多次点击    }});/*上一张*/$(&quot;.pre&quot;).on(&quot;click&quot;,function(){    if(flag==true){        /*设置节流阀*/        flag=false;        index++;        /*所谓下一张，就是将所有li元素围绕x旋转*/        $(&quot;li&quot;).each(function(key,value){ //0 1 2 3 4            /*通过添加transform样式进行旋转*/            $(this).css({                &quot;transform&quot;:&quot;rotateX(&quot;+(index*90)+&quot;deg)&quot;            });        });        setTimeout(function(){            flag=true;        },1000);    }});</code></pre><h2 id="3-进入元素停止定时器，离开开启"><a href="#3-进入元素停止定时器，离开开启" class="headerlink" title="3 进入元素停止定时器，离开开启"></a>3 进入元素停止定时器，离开开启</h2><pre><code>$(&apos;.view&apos;).hover(function(){  clearInterval(timeId);},function(){   timeId=setInterval(play,3000);})</code></pre>]]></content>
      
      
      <categories>
          
          <category> HTML5 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>利用css布局和定时器实现简单的点名器</title>
      <link href="/2019/01/22/JS/%E7%82%B9%E5%90%8D%E5%99%A8/"/>
      <url>/2019/01/22/JS/%E7%82%B9%E5%90%8D%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p><code>css</code>布局时本来想用表格或者列表来存放每个名字，后来发现不能实现元素之间边距，无奈，只能用<code>div</code>存放.用定时器实现就比较简单了，具体看代码</p><h1 id="html代码"><a href="#html代码" class="headerlink" title="html代码"></a><code>html</code>代码</h1><pre><code>&lt;h1&gt;点名器&lt;/h1&gt;</code></pre><p>  <code>&lt;input type=&quot;button&quot; value=&quot;开始&quot; id=&quot;start&quot;&gt;</code></p><p>  <code>&lt;input type=&quot;button&quot; value=&quot;结束&quot; id=&quot;end&quot;&gt;</code></p><pre><code> &lt;div class=&quot;btn&quot;&gt;       &lt;div&gt;1&lt;/div&gt;       &lt;div&gt;2&lt;/div&gt;       &lt;div&gt;3&lt;/div&gt;       &lt;div&gt;4&lt;/div&gt;       &lt;div&gt;5&lt;/div&gt;       &lt;div&gt;6&lt;/div&gt;       &lt;div&gt;7&lt;/div&gt;       &lt;div&gt;8&lt;/div&gt;       &lt;div&gt;9&lt;/div&gt;       &lt;div&gt;10&lt;/div&gt;       &lt;div&gt;11&lt;/div&gt;       &lt;div&gt;12&lt;/div&gt;       &lt;div&gt;13&lt;/div&gt;       &lt;div&gt;14&lt;/div&gt;       &lt;div&gt;15&lt;/div&gt;&lt;/div&gt;</code></pre><h2 id="css代码"><a href="#css代码" class="headerlink" title="css代码"></a><code>css</code>代码</h2><pre><code>*{    margin:0px;    padding: 0px;}.btn{    width:100%;}  input{    font-size: larger;    margin-left:47.5%;    margin-top: 10px;}.btn div{    width:100px;    height:30px;    margin-left:20px;    margin-top:30px;    float:left;    background-color: green;    text-align: center;}h1 {    color:rgb(201, 18, 79) ;    text-align:center}</code></pre><h3 id="颜色和样式可自行设置，这里本来想用伸缩盒子做一下的，后来想了一下，完全没必要，只要将存放名字的大盒子div的宽度设置为页面宽度就行了，无论我们怎么缩放页面，div盒子都会跟页面宽度一致。"><a href="#颜色和样式可自行设置，这里本来想用伸缩盒子做一下的，后来想了一下，完全没必要，只要将存放名字的大盒子div的宽度设置为页面宽度就行了，无论我们怎么缩放页面，div盒子都会跟页面宽度一致。" class="headerlink" title="颜色和样式可自行设置，这里本来想用伸缩盒子做一下的，后来想了一下，完全没必要，只要将存放名字的大盒子div的宽度设置为页面宽度就行了，无论我们怎么缩放页面，div盒子都会跟页面宽度一致。"></a>颜色和样式可自行设置，这里本来想用伸缩盒子做一下的，后来想了一下，完全没必要，只要将存放名字的大盒子<code>div</code>的宽度设置为页面宽度就行了，无论我们怎么缩放页面，<code>div</code>盒子都会跟页面宽度一致。</h3><h2 id="js代码"><a href="#js代码" class="headerlink" title="js代码"></a><code>js</code>代码</h2><pre><code>var flag=true;//设置节流阀document.getElementById(&apos;start&apos;).onclick=function(){    if(flag==true){      flag=false;//关闭节流阀，防止多次点击触发多个定时器      timeId=setInterval(function(){//定时器不能定义为局部变量，否则不能被clearInterval读取到，也不能被清除      var c=parseInt(Math.random()*15)//通过随机数方法随机点名      document.getElementsByClassName(&apos;btn&apos;)[0].children[c].style.backgroundColor=&apos;red&apos;;      for(i=0;i&lt;document.getElementsByClassName(&apos;btn&apos;)[0].children.length;i++){          if(i!=c){              document.getElementsByClassName(&apos;btn&apos;)[0].children[i].style.backgroundColor=&apos;green&apos;;          }      } //其他兄弟元素设置为原来的颜色，这里用Jquery的siblings方法会更方便一些    },100)    }}document.getElementById(&apos;end&apos;).onclick=function(){    clearInterval(timeId);    flag=true//清除定时器后打开节流阀}</code></pre><h3 id="我这里采用的是直接在页面上放置div元素，也可以通过js代码操作dom在页面上添加div子节点。但是因为操作dom太麻烦了，学完vue之后，就不用直接操作dom了，所以我这里并没有操作dom。"><a href="#我这里采用的是直接在页面上放置div元素，也可以通过js代码操作dom在页面上添加div子节点。但是因为操作dom太麻烦了，学完vue之后，就不用直接操作dom了，所以我这里并没有操作dom。" class="headerlink" title="我这里采用的是直接在页面上放置div元素，也可以通过js代码操作dom在页面上添加div子节点。但是因为操作dom太麻烦了，学完vue之后，就不用直接操作dom了，所以我这里并没有操作dom。"></a>我这里采用的是直接在页面上放置<code>div</code>元素，也可以通过<code>js</code>代码操作<code>dom</code>在页面上添加<code>div</code>子节点。但是因为操作dom太麻烦了，学完vue之后，就不用直接操作dom了，所以我这里并没有操作dom。</h3>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
